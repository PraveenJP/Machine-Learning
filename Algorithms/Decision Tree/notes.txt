Decision Tree
What is Decision Tree algorithm?
    This is one of my favorite algorithm and I use it quite frequently. 
    It is a type of supervised learning algorithm that is mostly used for classification problems. 
    Surprisingly, it works for both categorical and continuous dependent variables. 
    In this algorithm, we split the population into two or more homogeneous sets. 
    This is done based on most significant attributes/ independent variables to make as distinct groups as possible.

    Example:
    The best way to understand how decision tree works, is to play Jezzball â€“ a classic game from Microsoft. 
    Essentially, you have a room with moving walls and you need to create walls such that maximum area gets cleared off with out the balls.
    So, every time you split the room with a wall, you are trying to create 2 different populations with in the same room. 
    Decision trees work in very similar fashion by dividing a population in as different groups as possible.

Python Code
==============

#Import Library
#Import other necessary libraries like pandas, numpy...
from sklearn import tree
#Assumed you have, X (predictor) and Y (target) for training data set and x_test(predictor) of test_dataset
# Create tree object 
model = tree.DecisionTreeClassifier(criterion='gini') # for classification, here you can change the algorithm as gini or entropy (information gain) by default it is gini  
# model = tree.DecisionTreeRegressor() for regression
# Train the model using the training sets and check score
model.fit(X, y)
model.score(X, y)
#Predict Output
predicted= model.predict(x_test)